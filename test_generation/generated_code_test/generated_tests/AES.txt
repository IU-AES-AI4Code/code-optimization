from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
import unittest

def aes_encrypt(plaintext, key):
    cipher = AES.new(key, AES.MODE_ECB)
    ciphertext = cipher.encrypt(pad(plaintext))
    return ciphertext

def aes_decrypt(ciphertext, key):
    cipher = AES.new(key, AES.MODE_ECB)
    plaintext = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return plaintext

class TestAES(unittest.TestCase):

    def test_string_input(self):
        key = get_random_bytes(32)
        plaintext = "Hello, World!"
        ciphertext = aes_encrypt(plaintext.encode(), key)
        decrypted = aes_decrypt(ciphertext, key)
        self.assertEqual(decrypted.decode(), plaintext)

    def test_bytes_input(self):
        key = get_random_bytes(32)
        plaintext = b"Hello, World!"
        ciphertext = aes_encrypt(plaintext, key)
        decrypted = aes_decrypt(ciphertext, key)
        self.assertEqual(decrypted, plaintext)

    def test_bytearray_input(self):
        key = get_random_bytes(32)
        plaintext = bytearray("Hello, World!", 'utf-8')
        ciphertext = aes_encrypt(plaintext, key)
        decrypted = aes_decrypt(ciphertext, key)
        self.assertEqual(decrypted, plaintext)

    def test_key_length(self):
        key1 = get_random_bytes(16)
        key2 = get_random_bytes(24)
        key3 = get_random_bytes(32)
        plaintext = "Hello, World!"

        with self.assertRaises(ValueError):
            aes_encrypt(plaintext.encode(), key1)

        with self.assertRaises(ValueError):
            aes_encrypt(plaintext.encode(), key2)

        ciphertext = aes_encrypt(plaintext.encode(), key3)
        decrypted = aes_decrypt(ciphertext, key3)
        self.assertEqual(decrypted.decode(), plaintext)

if __name__ == '__main__':
    unittest.main()