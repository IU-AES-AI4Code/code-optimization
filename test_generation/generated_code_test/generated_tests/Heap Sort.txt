def test_heap_sort():
    import random

    # Test with a random list
    arr = [random.randint(0, 100) for _ in range(20)]
    sorted_arr = sorted(arr)
    heap_sort(arr)
    assert arr == sorted_arr, f"Expected {sorted_arr}, but got {arr}"

    # Test with a list that is already sorted
    arr = [i for i in range(20)]
    sorted_arr = [i for i in range(20)]
    heap_sort(arr)
    assert arr == sorted_arr, f"Expected {sorted_arr}, but got {arr}"

    # Test with a list that is reverse sorted
    arr = [i for i in range(20, 0, -1)]
    sorted_arr = [i for i in range(1, 21)]
    heap_sort(arr)
    assert arr == sorted_arr, f"Expected {sorted_arr}, but got {arr}"

    # Test with a list that has duplicate elements
    arr = [random.randint(0, 10) for _ in range(20)]
    sorted_arr = sorted(arr)
    heap_sort(arr)
    assert arr == sorted_arr, f"Expected {sorted_arr}, but got {arr}"

    print("All tests passed.")

test_heap_sort()